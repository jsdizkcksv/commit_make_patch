name: Make commit on patch

on:
  workflow_dispatch:
    inputs:
      repo_url:
        description: 'Git 仓库 URL'
        required: true
      branch:
        description: '仓库分支 (默认使用默认分支)'
        required: false
        default: ''
      start_commit:
        description: '起始提交'
        required: true
      end_commit:
        description: '结束提交'
        required: true
      patch_type:
        description: '补丁文件类型'
        required: true
        default: '多个'
        type: choice
        options:
          - '单个'
          - '多个'

jobs:
  Make:
    runs-on: ubuntu-latest
    env:
      WORKSPACE: ${{ github.workspace }}
    steps:
    - name: 检出当前仓库
      uses: actions/checkout@v4

    - name: 准备环境
      run: |
        # 创建工作区目录
        mkdir -p source_repo
        mkdir -p "$WORKSPACE/patches"
        echo "工作区路径: $WORKSPACE"
        echo "准备完成"

    - name: 克隆源仓库
      run: |
        echo "正在克隆源仓库到: $WORKSPACE/source_repo"
        cd "$WORKSPACE/source_repo"
        
        if [ -n "${{ github.event.inputs.branch }}" ]; then
          echo "克隆分支: ${{ github.event.inputs.branch }}"
          git clone --depth 100 --single-branch --branch "${{ github.event.inputs.branch }}" "${{ github.event.inputs.repo_url }}" .
        else
          echo "克隆默认分支"
          git clone --depth 100 --single-branch "${{ github.event.inputs.repo_url }}" .
        fi
        
        echo "当前分支: $(git branch --show-current)"
        echo "最近提交: $(git log -1 --oneline)"

    - name: 生成补丁文件
      id: generate
      run: |
        cd "$WORKSPACE/source_repo"
        
        # 获取提交哈希
        START_HASH=$(git rev-parse "${{ github.event.inputs.start_commit }}")
        END_HASH=$(git rev-parse "${{ github.event.inputs.end_commit }}")
        
        echo "起始提交: $START_HASH ($(git show -s --format='%s' $START_HASH))"
        echo "结束提交: $END_HASH ($(git show -s --format='%s' $END_HASH))"
        
        # 验证提交
        if ! git rev-parse --verify "$START_HASH" >/dev/null 2>&1; then
          echo "::error::起始提交不存在"
          exit 1
        fi

        if ! git rev-parse --verify "$END_HASH" >/dev/null 2>&1; then
          echo "::error::结束提交不存在"
          exit 1
        fi

        # 创建输出目录
        OUTPUT_DIR="$WORKSPACE/patches"
        mkdir -p "$OUTPUT_DIR"
        echo "补丁输出目录: $OUTPUT_DIR"

        # 生成补丁
        if [ "${{ github.event.inputs.patch_type }}" = "单个" ]; then
          echo "生成单个补丁文件..."
          git diff "$START_HASH" "$END_HASH" > "$OUTPUT_DIR/combined.patch"
          
          # 验证文件
          if [ -s "$OUTPUT_DIR/combined.patch" ]; then
            echo "补丁文件大小: $(wc -c < "$OUTPUT_DIR/combined.patch") 字节"
            echo "文件路径: $OUTPUT_DIR/combined.patch"
          else
            echo "::warning::生成的补丁文件为空"
          fi
        else
          echo "生成多个补丁文件..."
          git format-patch "$START_HASH..$END_HASH" -o "$OUTPUT_DIR"
          echo "生成的文件:"
          ls -l "$OUTPUT_DIR"
        fi

        # 设置输出变量
        echo "patch_dir=$OUTPUT_DIR" >> $GITHUB_OUTPUT
        echo "patch_type=${{ github.event.inputs.patch_type }}" >> $GITHUB_OUTPUT

    - name: 验证补丁文件
      run: |
        echo "检查补丁目录: $WORKSPACE/patches"
        ls -la "$WORKSPACE/patches"
        
        if [ "${{ github.event.inputs.patch_type }}" = "单个" ]; then
          if [ -f "$WORKSPACE/patches/combined.patch" ]; then
            echo "找到单个补丁文件"
            echo "文件大小: $(wc -c < "$WORKSPACE/patches/combined.patch") 字节"
          else
            echo "::error::未找到补丁文件"
            exit 1
          fi
        else
          PATCH_COUNT=$(ls -1 "$WORKSPACE/patches"/*.patch 2>/dev/null | wc -l)
          if [ "$PATCH_COUNT" -gt 0 ]; then
            echo "找到 $PATCH_COUNT 个补丁文件"
          else
            echo "::error::未找到任何补丁文件"
            exit 1
          fi
        fi

    - name: 创建时间戳命名的 ZIP 文件
      id: create_zip
      run: |
        TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
        ZIP_NAME="patch_$TIMESTAMP.zip"
        
        cd "$WORKSPACE/patches"
        zip -r "$WORKSPACE/$ZIP_NAME" .
        
        echo "ZIP文件路径: $WORKSPACE/$ZIP_NAME"
        echo "zip_name=$ZIP_NAME" >> $GITHUB_OUTPUT
        echo "zip_path=$WORKSPACE/$ZIP_NAME" >> $GITHUB_OUTPUT

    - name: 清理环境
      run: |
        rm -rf "$WORKSPACE/source_repo"
        echo "已清理源仓库"

    - name: 上传 ZIP 文件
      uses: actions/upload-artifact@v4
      with:
        name: git-patches
        path: ${{ steps.create_zip.outputs.zip_path }}
        if-no-files-found: error

    - name: 显示结果
      run: |
        echo "补丁生成完成"
        echo "ZIP文件: ${{ steps.create_zip.outputs.zip_name }}"
        echo "可在工作流产物中下载"
