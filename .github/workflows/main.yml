name: Make commit on patch

on:
  workflow_dispatch:
    inputs:
      repo_url:
        description: 'Git 仓库 URL'
        required: true
      start_commit:
        description: '起始提交'
        required: true
      end_commit:
        description: '结束提交'
        required: true
      patch_type:
        description: '补丁文件类型'
        required: true
        default: '多个'
        type: choice
        options:
          - '单个'
          - '多个'

jobs:
  Make:
    runs-on: ubuntu-latest
    steps:
    - name: 检出当前仓库
      uses: actions/checkout@v4

    - name: 生成补丁文件
      id: generate
      run: |
        #!/bin/bash
        set -euo pipefail

        # 修正输入参数访问方式
        REPO_URL="${{ github.event.inputs.repo_url }}"
        START_COMMIT="${{ github.event.inputs.start_commit }}"
        END_COMMIT="${{ github.event.inputs.end_commit }}"
        PATCH_TYPE="${{ github.event.inputs.patch_type }}"
        OUTPUT_DIR="./patches"

        # 创建临时目录
        TEMP_DIR=$(mktemp -d)
        echo "临时工作目录: $TEMP_DIR"

        # 克隆仓库（单分支完整历史）
        echo "正在克隆仓库（单分支完整历史）..."
        git clone --single-branch "$REPO_URL" "$TEMP_DIR"
        cd "$TEMP_DIR"

        # 获取实际提交哈希
        echo "正在解析提交哈希..."
        START_HASH=$(git rev-parse "$START_COMMIT")
        END_HASH=$(git rev-parse "$END_COMMIT")

        # 验证提交是否存在
        if ! git rev-parse --verify "$START_HASH" >/dev/null 2>&1; then
          echo "::error::起始提交 '$START_COMMIT' 不存在"
          exit 1
        fi

        if ! git rev-parse --verify "$END_HASH" >/dev/null 2>&1; then
          echo "::error::结束提交 '$END_COMMIT' 不存在"
          exit 1
        fi

        # 创建输出目录
        mkdir -p "$OUTPUT_DIR"
        PATCH_COUNT=0

        # 根据选择的类型生成补丁
        if [ "$PATCH_TYPE" = "单个" ]; then
          echo "正在生成单个补丁文件..."
          git diff "$START_HASH" "$END_HASH" > "$OUTPUT_DIR/combined.patch"
          PATCH_COUNT=1
          echo "已生成单个补丁文件: combined.patch"
        else
          echo "正在生成多个补丁文件..."
          git format-patch "$START_HASH..$END_HASH" -o "$OUTPUT_DIR" --quiet
          PATCH_COUNT=$(ls -1 "$OUTPUT_DIR"/*.patch 2>/dev/null | wc -l)
          echo "已生成 $PATCH_COUNT 个补丁文件"
        fi

        # 设置输出变量
        echo "patch_dir=$OUTPUT_DIR" >> $GITHUB_OUTPUT
        echo "patch_count=$PATCH_COUNT" >> $GITHUB_OUTPUT
        echo "patch_type=$PATCH_TYPE" >> $GITHUB_OUTPUT

    - name: 创建时间戳命名的 ZIP 文件
      id: create_zip
      run: |
        # 生成时间戳（年月日_时分秒）
        TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
        ZIP_NAME="patch_$TIMESTAMP.zip"
        
        # 进入补丁目录
        cd ${{ steps.generate.outputs.patch_dir }}
        
        # 创建 ZIP 文件
        zip -r "../$ZIP_NAME" .
        
        # 返回上级目录
        cd ..
        
        # 设置输出变量
        echo "zip_name=$ZIP_NAME" >> $GITHUB_OUTPUT
        echo "zip_path=$(pwd)/$ZIP_NAME" >> $GITHUB_OUTPUT
        echo "已创建 ZIP 文件: $ZIP_NAME"

    - name: 上传 ZIP 文件到工作流产物
      uses: actions/upload-artifact@v4
      with:
        name: git-patches
        path: ${{ steps.create_zip.outputs.zip_path }}
        if-no-files-found: error

    - name: 显示结果
      run: |
        if [ "${{ steps.generate.outputs.patch_type }}" = "单个" ]; then
          echo "成功生成单个补丁文件: combined.patch"
        else
          echo "成功生成 ${{ steps.generate.outputs.patch_count }} 个补丁文件"
        fi
        echo "已创建 ZIP 文件: ${{ steps.create_zip.outputs.zip_name }}"
        echo "补丁文件可在工作流产物中下载"
